package ro.siit.recipes.model;

import org.apache.tomcat.util.codec.binary.Base64;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.*;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;

/**
 * This class is the model used for recipes
 * I have implemented comparable to sort the recipes by the last modified date field
 * Also added a custom error message to validate the fields
 */

@Entity
@Table(name = "recipes")
public class Recipe implements Comparable<Recipe> {

    @Id
    @GeneratedValue
    private Long id;
    @NotEmpty(message = "The title should not be empty")
    @Size(min = 6, message = "The title should be at least 6 characters long")
    private String title;
    @NotEmpty(message = "Please add a short description")
    @Size(min = 20, message = "The description should be at least 20 characters long")
    private String description;
    @NotEmpty(message = "The ingredient list should not be empty")
    @Size(min = 20, message = "The ingredient list should be at least 20 characters long")
    private String ingredients;
    @NotEmpty(message = "Please make sure to fill in some directions")
    @Size(min = 20, message = "The directions should be at least 20 characters long")
    private String directions;
    @Lob
    @NotNull
    private byte[] image;
    @Enumerated(EnumType.STRING)
    @Column(name = "category")
    private Category category;
    @CreationTimestamp
    @Column(name = "date_created", updatable = false)
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
    private LocalDateTime dateCreated;//generated by dev
    @UpdateTimestamp
    @Column(name = "last_modified")
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
    private LocalDateTime lastModified;//generated by dev

    public Recipe() {
    }

    public Recipe(Long id, String title, String description, String ingredients, String directions, byte[] image, Category category, LocalDateTime created, LocalDateTime lastModified) {
        this.id = id;
        this.title = title.trim();
        this.description = description.trim();
        this.ingredients = ingredients.trim();
        this.directions = directions.trim();
        this.image = image;
        this.category = category;
        this.dateCreated = created;
        this.lastModified = lastModified;
    }


    public Long getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public String getIngredients() {
        return ingredients;
    }

    public String getDirections() {
        return directions;
    }

    public String getImage() {
        if (image != null) {
            return new String(Base64.encodeBase64(image), StandardCharsets.UTF_8);
        }
        return null;
    }

    public Category getCategory() {
        return category;
    }

    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    public LocalDateTime getLastModified() {
        return lastModified;
    }

    public void setImage(MultipartFile image) {
        try {
            this.image = image.getBytes();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    public void setLastModified(LocalDateTime lastModified) {
        this.lastModified = lastModified;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setTitle(String title) {
        this.title = title.trim();
    }

    public void setDescription(String description) {
        this.description = description.trim();
    }

    public void setIngredients(String ingredients) {
        this.ingredients = ingredients.trim();
    }

    public void setDirections(String directions) {
        this.directions = directions.trim();
    }


    @Override
    public int compareTo(Recipe o) {
        return o.getLastModified().compareTo(lastModified);
    }
}
